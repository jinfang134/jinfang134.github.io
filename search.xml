<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue文件不能跳转到定义的解决办法</title>
      <link href="2021/02/03/vue%E6%96%87%E4%BB%B6%E4%B8%8D%E8%83%BD%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>2021/02/03/vue%E6%96%87%E4%BB%B6%E4%B8%8D%E8%83%BD%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在vscode里面，vue项目里的引入文件不能跳转到定义，在开发过程中，总是要手动去查找文件再打开，挺不方便的.</p><p><strong>解决方法：</strong></p><ol><li>添加jsconfig.json文件,添加<a href="https://code.visualstudio.com/docs/languages/jsconfig#_using-webpack-aliases">webpack的alias</a><blockquote><p>jsconfig.json是干嘛的呢？</p><p>它用来表明当前的目录是一个js项目的根目录，可以配置一些js服务的特性</p></blockquote></li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">   <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">   <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">   <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">     <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;./src/*&quot;</span>] </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>],</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>babel.config.js里的presets添加<code>@vue/app</code> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/preset-typescript&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;@vue/app&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-syntax-dynamic-import&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-transform-sticky-regex&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-optional-chaining&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-nullish-coalescing-operator&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>黑石号沉船文物参观</title>
      <link href="2021/01/11/%E9%BB%91%E7%9F%B3%E5%8F%B7%E6%B2%89%E8%88%B9%E6%96%87%E7%89%A9%E5%8F%82%E8%A7%82/"/>
      <url>2021/01/11/%E9%BB%91%E7%9F%B3%E5%8F%B7%E6%B2%89%E8%88%B9%E6%96%87%E7%89%A9%E5%8F%82%E8%A7%82/</url>
      
        <content type="html"><![CDATA[<p>今年的元月似乎比往年更冷一些，元旦连续在家宅了一周，大门不敢出，二门不敢迈，好不容易又有了一个周末，逐拉上candice一起出门走走，天气太冷，似乎可选项不是很多. 想了一下，那就去博物馆吧，就当出支透透气，由此机缘巧合地碰到了黑石号沉船文物展，与千年前的瑰宝以这样的方式有了一次交集．<br><img src="https://i.loli.net/2021/01/11/JBnORNL2QedsXYH.png" alt="蓝花白釉浅碟，为唐代青花瓷重要实例">  </p><a id="more"></a><p>黑石号沉船于1998年由一位渔民发现于加斯帕尔海峡16米深的海底，因发现地靠近一块黑色大礁岩得名“Batu Hitam”，中文译为“黑石号”。此后，发现地被从当地渔民手中买走，开展发掘的许可被授予印尼当地的一家公司。发掘随后在一纸合作协议下由德国人蒂尔曼·沃特方（Tilman Walterfang）及其在“海底探索”公司（Seabed Explorations）中的队伍进行，周边的安保工作则由印尼海军提供。发掘共实施了两次，第一次于1998年8月开始，第二次于1999年开始。“海底探索”公司为打捞提供了船只以及在西北季风到来前和季风期间印尼海军提供安保服务的费用。</p><p>黑石号搭载的货物类型包含碗碟、铜镜、香料罐、水罐、明器和镀金银盒等，总数超过6万件</p><p><img src="https://i.loli.net/2021/01/11/guyc8hSfL612VjD.png" alt="江心镜．铭文为“唐乾元元年戊戌十一月廿九日于扬州扬子江心百炼造成”"><br><img src="https://i.loli.net/2021/01/11/F4lTJbV75M9qrS8.jpg" alt="picture 5">  </p><p><img src="https://i.loli.net/2021/01/11/UXqK7IAYJysmrTo.jpg" alt="自帶吸管的杯子"><br>不得不佩服古人的脑洞也是挺大的。<br><img src="https://i.loli.net/2021/01/11/K3kq9m24GcAVpOM.jpg" alt="picture 7"><br><img src="https://i.loli.net/2021/01/11/nx87TGiOhsW2CYc.jpg" alt="picture 8"><br><img src="https://i.loli.net/2021/01/11/5Vi17YQyKxo8sMJ.jpg" alt="古朴素雅的碗"><br><img src="https://i.loli.net/2021/01/11/Zg1A2TuSGaOPmUW.jpg" alt="特别喜欢这个荷花图案">  </p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 生活点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 展览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为私有项目集成ci/cd服务</title>
      <link href="2021/01/11/%E5%85%8D%E8%B4%B9%E7%9A%84ci-cd%E6%9C%8D%E5%8A%A1/"/>
      <url>2021/01/11/%E5%85%8D%E8%B4%B9%E7%9A%84ci-cd%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。CI/CD 的核心概念是持续集成、持续交付和持续部署。作为一个面向开发和运营团队的解决方案，CI/CD 主要针对在集成新代码时所引发的问题（亦称：“集成地狱”）。</p><p>很多收费的CI/CD对开源项目都很友好(比如支持github的travis-ci)，可以提供免费的CI/CD服务，具体的服务商列表，可以参考<a href="https://github.com/ripienaar/free-for-dev#ci-and-cd">这里</a>，但是对于私有项目，则要么付费，要么服务受到了限制,结合国内的网络环境，我选取了以下几种持续集成服务作为对比，最后我选择了coding作为我的ｃｉｃｄ方案，1000分钟也满足了我的需求</p><a id="more"></a><table><thead><tr><th>服务</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>coding.net</td><td>国内服务提供商，网速快，提供样例配置，上手很快，兼容jenkins的pipeline语法，并提供一些针对性的扩展，自带docker仓库及其它制品库，源代码支持github,gitlab,gitee等多种第三方仓库</td><td>免费时长较少，1000分钟／月</td></tr><tr><td>gitlab.com</td><td>可以直接从仓库里创建pipeline,集成非常方便，2000min/月</td><td>国内访问需要科学上网，网速比较慢</td></tr><tr><td>github.com</td><td>集成github的action，不限项目数量，2000min/月</td><td>网络较慢，特殊时期可能无法访问,</td></tr></tbody></table><p>下面以一个java springboot+gradle项目为例子，来说明如何集成到项目当中，进行项目构建和发布到远程服务器当中．</p><p>构建过程非常简单</p><pre class="mermaid">graph LR    A[检出] -->|Gitee| B(测试)    B --> C(编译)    C -->D[发布到远程服务器]</pre><h2 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h2><p>类似于jenkins的配置，在项目根目录下添加文件<code>Jenkinsfile</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">&#x27;检出&#x27;</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>,</span><br><span class="line">        <span class="symbol">branches:</span> [[<span class="attr">name:</span> GIT_BUILD_REF]],</span><br><span class="line">        <span class="symbol">userRemoteConfigs:</span> [[</span><br><span class="line">          <span class="symbol">url:</span> GIT_REPO_URL,</span><br><span class="line">          <span class="symbol">credentialsId:</span> CREDENTIALS_ID</span><br><span class="line">        ]]])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;单元测试&#x27;</span>) &#123;</span><br><span class="line">      post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">          junit <span class="string">&#x27;build/test-results/**/*.xml&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;./gradlew test&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;编译&#x27;</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo <span class="string">&#x27;开始构建&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;./gradlew clean build -x test&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    stage(<span class="string">&#x27;部署到远端服务&#x27;</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        script &#123;</span><br><span class="line">          <span class="keyword">def</span> remoteConfig = [:]</span><br><span class="line">          remoteConfig.name = <span class="string">&quot;aliyun&quot;</span></span><br><span class="line">          remoteConfig.host = <span class="string">&quot;$&#123;REMOTE_HOST&#125;&quot;</span></span><br><span class="line">          remoteConfig.port = <span class="string">&quot;$&#123;REMOTE_SSH_PORT&#125;&quot;</span>.toInteger()</span><br><span class="line">          remoteConfig.allowAnyHosts = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">          withCredentials([</span><br><span class="line">            sshUserPrivateKey(</span><br><span class="line">              <span class="symbol">credentialsId:</span> <span class="string">&quot;$&#123;REMOTE_CRED&#125;&quot;</span>,</span><br><span class="line">              <span class="symbol">keyFileVariable:</span> <span class="string">&quot;privateKeyFilePath&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            usernamePassword(</span><br><span class="line">              <span class="symbol">credentialsId:</span> <span class="string">&quot;$&#123;CODING_ARTIFACTS_CREDENTIALS_ID&#125;&quot;</span>,</span><br><span class="line">              <span class="symbol">usernameVariable:</span> <span class="string">&#x27;CODING_DOCKER_REG_USERNAME&#x27;</span>,</span><br><span class="line">              <span class="symbol">passwordVariable:</span> <span class="string">&#x27;CODING_DOCKER_REG_PASSWORD&#x27;</span></span><br><span class="line">            )</span><br><span class="line">          ]) &#123;</span><br><span class="line">            <span class="comment">// SSH 登陆用户名</span></span><br><span class="line">            remoteConfig.user = <span class="string">&quot;$&#123;REMOTE_USER_NAME&#125;&quot;</span></span><br><span class="line">            <span class="comment">// SSH 私钥文件地址</span></span><br><span class="line">            remoteConfig.identityFile = privateKeyFilePath</span><br><span class="line"></span><br><span class="line">            sshPut(</span><br><span class="line">              <span class="symbol">remote:</span> remoteConfig,</span><br><span class="line">              <span class="comment">// 本地文件或文件夹</span></span><br><span class="line">              <span class="symbol">from:</span> <span class="string">&#x27;/build/libs/app-1.0.1.jar&#x27;</span>,</span><br><span class="line">              <span class="comment">// 远端文件或文件夹</span></span><br><span class="line">              <span class="symbol">into:</span> <span class="string">&#x27;/home/ubuntu/workspace/app/app.jar&#x27;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            sshCommand(</span><br><span class="line">              <span class="symbol">remote:</span> remoteConfig,</span><br><span class="line">              <span class="symbol">command:</span> <span class="string">&quot;service daotong-app restart&quot;</span>,</span><br><span class="line">              <span class="symbol">sudo:</span> <span class="literal">true</span>,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            echo <span class="string">&quot;部署成功，请到 http://$&#123;REMOTE_HOST&#125;:8080 预览效果&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h2><p>在项目根目录下添加<code>.gitlab-ci.yml</code>文件，并添加如下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">java:8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="comment">## Install ssh-agent if not already installed, it is required by Docker.</span></span><br><span class="line">  <span class="comment">## (change apt-get to yum if you use an RPM-based image)</span></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;command -v ssh-agent &gt;/dev/null || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="comment">## Run ssh-agent (inside the build environment)</span></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent</span> <span class="string">-s)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="comment">## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store</span></span><br><span class="line">  <span class="comment">## We&#x27;re using tr to fix line endings which makes ed25519 keys work</span></span><br><span class="line">  <span class="comment">## without extra base64 encoding.</span></span><br><span class="line">  <span class="comment">## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556</span></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$SSH_PRIVATE_KEY&quot;</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27;\r&#x27;</span> <span class="string">|</span> <span class="string">ssh-add</span> <span class="bullet">-</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="comment">## Create the SSH directory and give it the right permissions</span></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$SSH_KNOWN_HOSTS&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">644</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/gradlew</span> <span class="string">clean</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;build&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./gradlew</span> <span class="string">clean</span> <span class="string">build</span> <span class="string">-x</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-prod:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;deploy starting&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">scp</span> <span class="string">build/libs/app-*.jar</span> <span class="string">ubuntu@$SSH_HOST:~/workspace/app/app.jar</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ssh</span> <span class="string">ubuntu@$SSH_HOST</span> <span class="string">&quot;sudo service app restart&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;deploy sucess&quot;</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack踩坑记录</title>
      <link href="2021/01/07/Webpack%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>2021/01/07/Webpack%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>在使用webpack进行构建打包时，经常会碰到一些莫名其妙的坑，开贴记录一下，方便以后碰到同类问题的时候查找，同时也给大家提供一个借鉴．</p><h2 id="使用esj时报错"><a href="#使用esj时报错" class="headerlink" title="使用esj时报错"></a>使用esj时报错</h2><blockquote><p>“errorMessage”: “Cannot create property ‘ejs’ on string ‘self’”,<br>  “errorType”: “TypeError”,</p></blockquote><a id="more"></a><p>解决办法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    <span class="built_in">window</span>: <span class="built_in">JSON</span>.stringify(<span class="string">&#x27;self&#x27;</span>),</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h2 id="找到不文件"><a href="#找到不文件" class="headerlink" title="找到不文件"></a>找到不文件</h2><blockquote><p>“errorMessage”: “ENOENT: no such file or directory, open ‘/templates/encrypted-key.tpl.xml’”,</p></blockquote><p>这是因为用了 <code>xml-encryption</code> 这个库，里面会动态地读当前目录下的这个文件，源代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> templates = &#123;</span><br><span class="line">  <span class="string">&#x27;encrypted-key&#x27;</span>: fs.readFileSync(path.join(__dirname, <span class="string">&#x27;templates&#x27;</span>, <span class="string">&#x27;encrypted-key.tpl.xml&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;keyinfo&#x27;</span>: fs.readFileSync(path.join(__dirname, <span class="string">&#x27;templates&#x27;</span>, <span class="string">&#x27;keyinfo.tpl.xml&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解决方法就是使用<code>CopyWebpackPlugin</code>插件在构建的时候，把找不到的文件复制到对应的目录下，这样程序在运行时，就不会再报同样的错误了．</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">&#x27;../node_modules/xml-encryption/lib/templates/encrypted-key.tpl.xml&#x27;</span>),</span><br><span class="line">      to: path.resolve(__dirname, <span class="string">&#x27;../dist/templates/encrypted-key.tpl.xml&#x27;</span>),</span><br><span class="line">      <span class="comment">// ignore: [&#x27;.*&#x27;],</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">&#x27;../node_modules/xml-encryption/lib/templates/keyinfo.tpl.xml&#x27;</span>),</span><br><span class="line">      to: path.resolve(__dirname, <span class="string">&#x27;../dist/templates/keyinfo.tpl.xml&#x27;</span>),</span><br><span class="line">      <span class="comment">// ignore: [&#x27;.*&#x27;],</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]),</span><br></pre></td></tr></table></figure><p>修改以后发现文件虽然有了，但是还是失败,依然报同样的错误,问题没有解决,排查发现是因为webpack的问题,会在打包的时候将<code>__dirname</code>改写别的变量名,所以要加如下的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node: &#123;</span><br><span class="line">  __dirname: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://codeburst.io/use-webpack-with-dirname-correctly-4cad3b265a92">webpack dirname</a></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nginx搭建日志服务器</title>
      <link href="2021/01/07/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/01/07/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>网站在运行时会产生很多日志文件，需要查询日志一般需要登录到服务器上，再down下来进行搜索检索，非常不方便，业内有一些开源的方案可以将日志文件进行聚合，然后导入到<code>elasticsearch</code>当中，再用kibana进行前端日志展示与检索．即所谓的ELK(elasticsearch+Logstash+Kibana)．</p><p>这个方案当然好是肯定好，logstash可以聚合多个应用的日志文件，同时借助elasticsearch的搜索引擎能力，可以快速地通过关键字查询日志，进行日志分析．</p><p>但是对于一个小型应用来说，这么做未免就有点大动干戈了，对于日志量不大的单体应用来说，我们可以将日志目录用ngnix来挂载到一个contextpath上，这样就可以在线对日志进行一些简单的查询，此即是本文要讨论的问题．</p><a id="more"></a><h2 id="基本需求"><a href="#基本需求" class="headerlink" title="基本需求"></a>基本需求</h2><p>假设我们有一个站点<code>http://www.foobar.com</code>,他的日志存在<code>/home/ubuntu/log/</code>这个目录下面，当我们访问<code>http://www.foobar.com/log</code> 时就可以看到日志的内容</p><ol><li>日志按日期分成多个文件，需要列出文件列表<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ll /home/ubuntu/<span class="built_in">log</span></span><br><span class="line">total 19M</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 470K Dec 22 23:55 2020-12-22.log</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 644K Dec 23 23:45 2020-12-23.log</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 950K Dec 24 23:45 2020-12-24.log</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 260K Dec 25 23:45 2020-12-25.log</span><br></pre></td></tr></table></figure></li><li>当访问<code>http://www.foobar.com/log</code>需要输入用户名密码</li><li>可以直接在网页显示日志内容，而不是点击下载</li><li>文件编码为<code>utf-8</code></li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>先来看一眼完整的配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> ;</span><br><span class="line">    <span class="attribute">server_name</span> www.foobar.com;</span><br><span class="line">    <span class="attribute">add_header</span> Content-Security-Policy <span class="string">&#x27;upgrade-insecure-requests&#x27;</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> HOST $HOST;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Request-Url $request_uri;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /log &#123;</span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">auth_basic</span>           <span class="string">&quot;Administrator&#x27;s Area&quot;</span>;</span><br><span class="line">        <span class="attribute">auth_basic_user_file</span> /etc/apache2/.htpasswd; </span><br><span class="line">        <span class="attribute">root</span> /home/ubuntu/log;</span><br><span class="line">        <span class="attribute">rewrite</span> <span class="string">&quot;^/log/(.*)$&quot;</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="section">types</span> &#123;</span><br><span class="line">            text/plain log;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li><code>autoindex on;</code> 这行是为了列出文件目录</li><li><code>types</code>是为了告诉nginx哪些后缀文件可以作为<code>text/plain</code>返回 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">types &#123;</span><br><span class="line">    text&#x2F;plain log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>为了保护文件内容，加了auth_basic认证，用以下命令生成用户名和密码 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo htpasswd -c /etc/apache2/.htpasswd username</span><br></pre></td></tr></table></figure> 然后在nginx里配置如下信息就可以了． <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">auth_basic</span>           <span class="string">&quot;Administrator&#x27;s Area&quot;</span>;</span><br><span class="line"><span class="attribute">auth_basic_user_file</span> /etc/apache2/.htpasswd; </span><br></pre></td></tr></table></figure></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>浏览器输入<a href="http://www.foobar.com/log%E4%BB%A5%E5%90%8E%EF%BC%8C%E4%BC%9A%E5%BC%B9%E5%87%BA%E5%A6%82%E4%B8%8B%E5%AF%B9%E8%AF%9D%E6%A1%86%EF%BC%8C%E6%8F%90%E7%A4%BA%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81">http://www.foobar.com/log以后，会弹出如下对话框，提示输入用户名和密码</a><br><img src="https://i.loli.net/2021/01/07/ndV2skv9QUWKq1A.png" alt="picture 7"><br>输入完以后，就会显示如下的文件列表<br><img src="https://i.loli.net/2021/01/07/MsqSrOPNtXV1JWp.png" alt="picture 8"><br>点击单个链接就可以直接查看具体的日志文件内容了，而不需要再下载．</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿Jenkins Blue Ocean 实现的一个Vue Pipeline插件</title>
      <link href="2021/01/06/vue-pipeline/"/>
      <url>2021/01/06/vue-pipeline/</url>
      
        <content type="html"><![CDATA[<p>在<code>Jenkins</code>里有一款插件让我们耳目一新,这就是 <code>Jenkins blue ocean</code>, 可以很直观地显示当前build的进程和每个stage的详细日志.<br><img src="https://i.loli.net/2021/01/07/COY5HGkq3NptJTs.png" alt="picture 3">  </p><p>出现问题以后,能够快速判断问题出现在哪,快速查看相关的日志,而不受别的stage的日志的影响.<br><img src="https://i.loli.net/2021/01/07/YUn8oKIDEgmMWCX.png" alt="picture 2">  </p><a id="more"></a><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>jenkins pipeline 这一良好的可视化设计也被我司的设计人员心水, 并融入到我司的产品设计当中, 设计交到我们开发这边以后,经过前期的调研发现,目前并没有组件能够实现类型的功能.既然找不到,那就只能参考Jenkins的设计,自行开发一个. </p><p>Jenkins pipeline是用svg实现的,前端是react, 整个代码不是特别优雅,代码冗长, 业务逻辑和界面渲染的逻辑混在一块, 特别是曲线描绘部分的代码,看得云里雾里, 所以干脆弃之不用,只采用了他的一些样式.</p><h2 id="SVG简介"><a href="#SVG简介" class="headerlink" title="SVG简介"></a>SVG简介</h2><p>SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector Graphics）。其他图像格式都是基于像素处理的，SVG 则是属于对图像的形状描述，所以它本质上是文本文件，体积较小，且不管放大多少倍都不会失真。<br>SVG 文件可以直接插入网页，成为 DOM 的一部分，然后用 JavaScript 和 CSS 进行操作。<br>SVG是基于xml的文本语言, 这就意味着他可以被搜索,索引和压缩,并且可以直接被任何的文本编辑器进行编辑处理.</p><h2 id="Vue-与-SVG"><a href="#Vue-与-SVG" class="headerlink" title="Vue 与 SVG"></a>Vue 与 SVG</h2><p>vue与SVG似乎天然是一对最好的搭档, 利用vue可以将svg里的一个个元素,一个个分组写成vue的组件, 将复杂的逻辑简单化,这样就可以将一个复杂的svg图形用vue化繁为简. 同时vue的动态绑定也给svg赋予了二次生命, 使svg可以实时响应数据的变化,而呈现不同的图形效果.</p><h2 id="相关的算法"><a href="#相关的算法" class="headerlink" title="相关的算法"></a>相关的算法</h2><h3 id="图的拓扑排序"><a href="#图的拓扑排序" class="headerlink" title="图的拓扑排序"></a>图的拓扑排序</h3><p>对图进行拓扑排序是很有必要的，由此可以确定以下几个问题</p><ol><li>图的开始节点</li><li>图的结束节点</li><li>图是否有环</li></ol><p>拓扑排序的算法非常简单，下面进行简单的描述：</p><ol><li>找到一个入度为0的节点v</li><li>删除该节点</li><li>重复1,2这个过程，直到所有的节点都被删除<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">topologicalSorting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> visited = [];</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.nodes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[i] == <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="built_in">this</span>.findParents(i)</span><br><span class="line">    <span class="keyword">if</span> (list.length == <span class="number">0</span> || list.every(<span class="function"><span class="params">it</span> =&gt;</span> visited[it] == <span class="literal">true</span>)) &#123;</span><br><span class="line">      visited[i] = <span class="literal">true</span>;</span><br><span class="line">      result.push(i)</span><br><span class="line">      i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否有环"><a href="#是否有环" class="headerlink" title="是否有环"></a>是否有环</h3>判断图是否有环其实有很多种方法，在前一个算法中，我们已经得到图的拓扑排序结果，那么只需要判断一下拓扑排序的结果的长度是否小于图的节点数，如果小于，那么图中有环。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">hasCircle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="built_in">this</span>.topologicalSorting()</span><br><span class="line">    <span class="keyword">return</span> list.length &lt; <span class="built_in">this</span>.nodes.length;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="图的最长路径"><a href="#图的最长路径" class="headerlink" title="图的最长路径"></a>图的最长路径</h3>在有向图的渲染当中，如果使用广搜或者深搜的算法来遍历节点，并按照遍历的顺序来安排节点的位置，那么会出现最终的节点不一定出现在最右侧的情况，这样pipeline图就显得不够直观，不能够一目了然地看出图的开始节点和结束节点。<br>所以，我使用的算法是求解图的最长路径，将路径当中的节点从拓扑排序的结果当中去除，不断重复这个过程，直到所有的节点都被计算出来，最终生成的效果如下图。<br><img src="https://i.loli.net/2021/01/07/o6cSbqY9QwVsmnL.png" alt="picture 5">  </li></ol><p>最长路径使用递归算法实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查找从第&#123;index&#125;个节点开始的最长路径，返回经过的未被计算位置的节点,</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">findLongestWay</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> children = <span class="built_in">this</span>.findChildren(index)</span><br><span class="line">    <span class="keyword">if</span> (children.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [index]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [],</span><br><span class="line">      maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.solvedList[children[i]]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> list = <span class="built_in">this</span>.findLongestWay(children[i])</span><br><span class="line">      <span class="keyword">if</span> (list.length &gt; maxLength) &#123;</span><br><span class="line">        maxLength = list.length;</span><br><span class="line">        arr = list.slice();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [index].concat(arr);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="判断图是否是树"><a href="#判断图是否是树" class="headerlink" title="判断图是否是树"></a>判断图是否是树</h3><p>当给定的数据实际描述的是一棵树时，可以针对性地进行一些优化，所以我们首先需要判断是否是一棵树，判断树的方法就是判断某个节点在邻接表中重复出现，因为每个树节点的入度只能为1。所以如果某个节点的入度大于1,那么肯定是一个图。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前的图是否是一棵树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">isTree</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.nodes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.nodes[i].next) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.nodes[i].next.some(<span class="function"><span class="params">it</span> =&gt;</span> set.has(it.index))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.nodes[i].next.forEach(<span class="function"><span class="params">it</span> =&gt;</span> set.add(it.index))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算树在y轴上占据的宽度"><a href="#计算树在y轴上占据的宽度" class="headerlink" title="计算树在y轴上占据的宽度"></a>计算树在y轴上占据的宽度</h3><p>为了给某个树节点分配坐标位置，除了要知道他的父节点以外，还需要知道他需要的宽度，这里使用递归算法来实现，树的宽度是子树宽度的和。</p><p><strong><code>优化：</code></strong> 可以用记忆化搜索的方法来优化性能，用一个数组来存储子树的宽度，这样在递归调用的时候避免了大量的重复计算，这里因为问题规模一般不大，就没有这么做了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算一个树要占的宽度</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="title">getWidthOfTree</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.nodes[index]</span><br><span class="line">  <span class="keyword">if</span> (!node.next || node.next.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> width = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.next.length; i++) &#123;</span><br><span class="line">    width += <span class="built_in">this</span>.getWidthOfTree(node.next[i].index)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算每个树节点的位置"><a href="#计算每个树节点的位置" class="headerlink" title="计算每个树节点的位置"></a>计算每个树节点的位置</h3><p>知道树的宽度和树的父节点坐标，就可以递归地计算每个子节点的坐标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为树计算每个节点的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">y</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">assignNodeForTree</span>(<span class="params">index, x, y</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.matrix[y][x] = index</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.nodes[index]</span><br><span class="line">  <span class="keyword">if</span> (!node.next || node.next.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> xx = x + <span class="number">1</span>; <span class="keyword">let</span> yy = y;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.next.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> width = <span class="built_in">this</span>.getWidthOfTree(node.next[i].index)</span><br><span class="line">    <span class="built_in">this</span>.assignNodeForTree(node.next[i].index, xx, yy)</span><br><span class="line">    yy += width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终渲染效果如下图：<br><img src="https://i.loli.net/2021/01/07/sruVQ7jnDd6PMKp.png" alt="picture 6">  </p><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><a href="https://github.com/jinfang134/vue-pipeline">https://github.com/jinfang134/vue-pipeline</a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://jinfang134.github.io/vue-pipeline/">https://jinfang134.github.io/vue-pipeline/</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG">https://developer.mozilla.org/en-US/docs/Web/SVG</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于vpn的那些事</title>
      <link href="2020/12/30/%E5%85%B3%E4%BA%8Evpn%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>2020/12/30/%E5%85%B3%E4%BA%8Evpn%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>在外企上班，公司网络是直接vpn到新加坡的，也经常要用slack等工具进行线上交流，没个梯子还经常挺不方便的。最近抽空折腾了一下，写个文章记录一下过程。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>服务器我用的是<a href="https://billing.virmach.com/index.php?rp=/store/kvm-and-ssd-windows-vps">virmach</a>,1.25刀一个月,价格还是挺实惠的，500GB的网络带宽应该是用不完的，<del>至于网络速度，我测试了一下，youtube里的720p视频可以流畅播放。</del></p><p>在购买之前，最好先买一个月的主机试用一下，不同的地区的网络状况是不一样的，可以用<a href="https://www.ping.cn/http/">站长工具</a>来测一下速，我先后买过两个区的主机，本人在上海，第一个主机买的芝加哥，联通速度比较满意，移动网络有点卡，但是也能用，但是第二个主机在水牛城，联通速度却很卡，网络延时很大，移动的网络挺好延时一秒多．所以根据自己的需求和实际情况做一个使用前测试很有必要．或者可以购买多个区的来做备份，但也最好提前测试一下．</p><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p>在目标主机上用nginx搭一个静态网站，里面放一个150k的<code>index.html</code>文件</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --name some-nginx -p 80:80 -v /home/ubuntu/www/:/usr/share/nginx/html:ro -d nginx</span></span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://i.loli.net/2021/01/29/P2IejHOcS1hsfLz.png" alt="测试的整体情况">  </p><p><img src="https://i.loli.net/2021/01/29/YMe8r3zwLXtC5o7.png" alt="水牛城主机，可以看出上海联通延迟很大">  </p><p><img src="https://i.loli.net/2021/01/29/c12n5pFzegNh4db.png" alt="上海移动延迟比较满意，只有1.55s">  </p><p><img src="/images/2020-12-31-00-28-50.png"></p><a id="more"></a><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>服务端我用的是的<a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks-libv</a>,为了与系统环境进行隔离，方便进行迁移，我用的是docker的方式来进行部署的，在官方hub里就有相应的<a href="https://hub.docker.com/r/shadowsocks/shadowsocks-libev">docker镜像</a>，使用还挺方便的。</p><p>如果没有docker的话，得先安装docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install common tools</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y vim git curl zsh htop python3-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># install docker</span></span><br><span class="line">curl -ssl https://get.docker.com/ | sh</span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install docker-compose</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>docker直接运行<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e PASSWORD=&lt;password&gt; -p&lt;server-port&gt;:8388 -p&lt;server-port&gt;:8388/udp -d shadowsocks/shadowsocks-libev</span><br></pre></td></tr></table></figure></li><li>docker-compose方式，我更推荐这种方式，更加便于维护和管理，写一个<code>docker-compose.yml</code>,内容如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">shadowsocks1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">shadowsocks/shadowsocks-libev</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">shadowsocks1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PASSWORD:</span> <span class="string">password</span></span><br><span class="line">      <span class="comment"># METHOD: CHACHA20-IETF-POLY1305</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8388:8388&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8388:8388/udp&quot;</span></span><br><span class="line">    <span class="comment"># volumes: </span></span><br><span class="line">      <span class="comment"># - $PWD/config:/etc/shadowsocks</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>然后运行<code>docker-compose up -d</code>来启动shadowsocks服务，如果不配置method,默认是使用<code>aes-256-gcm</code>方法</li></ul><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>Shadowsocks 目前的客户端基本各个平台上面的都有。本文主要介绍在 Windows、macOS、Linux、Android、iOS、OpenWRT 平台上常用的一些客户端。</p><p>需要说明的一点是，如果使用<code>Outline</code>客户端，需要一个访问密钥，那这个访问密钥是怎么生成呢？</p><p>规则如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> method=<span class="string">&#x27;aes-256-gcm&#x27;</span></span><br><span class="line"><span class="keyword">const</span> password=<span class="string">&#x27;password&#x27;</span></span><br><span class="line"><span class="keyword">const</span> host=<span class="string">&#x27;107.174.250.123&#x27;</span></span><br><span class="line"><span class="keyword">const</span> port=<span class="string">&#x27;8388&#x27;</span></span><br><span class="line"><span class="keyword">const</span> name=<span class="string">&#x27;myss&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">&quot;ss://&quot;</span> + btoa(<span class="string">`<span class="subst">$&#123;method&#125;</span>:<span class="subst">$&#123;password&#125;</span>@<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>)+ <span class="string">&#x27;#&#x27;</span> + name )</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">method</span>: <span class="string">rc4-md5</span></span><br><span class="line"><span class="attr">password</span>: <span class="string">test123</span></span><br><span class="line"><span class="attr">host</span>: <span class="string">283.234.123.21</span></span><br><span class="line"><span class="attr">port</span>: <span class="string">4000</span></span><br></pre></td></tr></table></figure><p>拼接字符串得到：<code>rc4-md5:test123@283.234.123.21:4000</code><br>进行<code>base64</code>编码以后，得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmM0LW1kNTp0ZXN0MTIzQDI4My4yMzQuMTIzLjIxOjQwMDA&#x3D;</span><br></pre></td></tr></table></figure><p>最后访问密钥如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss:&#x2F;&#x2F;cmM0LW1kNTp0ZXN0MTIzQDI4My4yMzQuMTIzLjIxOjQwMDA&#x3D;#shadowsock</span><br></pre></td></tr></table></figure><p>更新：　发现原来还有一个<a href="https://shadowsocks.org/en/config/quick-guide.html">官网</a>，里面可以自动生成这个链接．<br><img src="https://i.loli.net/2021/01/06/t2FZVpMEwTChcUb.png" alt="picture 1">  </p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><strong>Shadowsocks Windows</strong>: <a href="https://github.com/shadowsocks/shadowsocks-windows/releases">GitHub</a></p><p>在 Windows 平台推荐使用，由官方出品，需要安装 <a href="https://www.microsoft.com/net/download/dotnet-framework-runtime">.NET Framework</a>，请尽量使用最新版本。使用教程请参考：<a href="https://www.vpnto.net/posts/windows-shadowsocks/">在 Windows 中配置 Shadowsocks 客户端</a></p><p><strong>Outline Windows</strong>: <a href="https://github.com/Jigsaw-Code/outline-client/">GitHub</a>/<a href="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/Outline-Client.exe">Direct Download</a></p><p><a href="https://getoutline.org/">Outline</a> 由 <a href="https://jigsaw.google.com/">Google Jigsaw</a> 出品，功能上比较简单，必须使用秘钥进行连接。</p><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p><strong>ShadowsocksX-NG</strong>: <a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases">GitHub</a></p><p>新一代的 ShadowsocksX，底层是基于 Shadowsocks-libev 的 ss-local 客户端。使用教程请参考：<a href="https://vpnto.net/posts/macos-shadowsocks/">在 macOS 中配置 Shadowsocks 客户端</a></p><p><strong>Outline macOS</strong>: <a href="https://github.com/Jigsaw-Code/outline-client/">GitHub</a>/<a href="https://itunes.apple.com/app/outline-app/id1356178125">App Store</a></p><p><a href="https://getoutline.org/">Outline</a> 由 <a href="https://jigsaw.google.com/">Google Jigsaw</a> 出品，功能上比较简单，必须使用秘钥进行连接。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><strong>Shadowsocks Qt5</strong>: <a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation">GitHub</a></p><p>Shadowsocks 在 Linux 上唯一的 GUI，请按照 <a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation">Wiki 安装指南</a>进行安装, 如果你喜欢命令行的请使用 Shadowsocks-libev 客户端。使用教程请参考：<a href="https://vpnto.net/posts/linux-shadowsocks/">在 Linux 中配置 Shadowsocks 客户端</a></p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>如果无法访问 Google play 请下载 apk 安装。</p><p><strong>Shadowsocks Android</strong>: <a href="https://github.com/shadowsocks/shadowsocks-android/releases">GitHub</a>/<a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks">Google Play</a> (<a href="https://play.google.com/apps/testing/com.github.shadowsocks">beta</a>)</p><p>Shadowsocks 官方开发的 Android 版本，功能强大，推荐使用。使用教程请参考：<a href="https://vpnto.net/posts/android-shadowsocks/">在 Android 中使用 Shadowsocks 客户端</a></p><p><strong>Outline Android</strong>: <a href="https://github.com/Jigsaw-Code/outline-client/">GitHub</a>/<a href="https://play.google.com/store/apps/details?id=org.outline.android.client">Play Store</a>/<a href="https://github.com/Jigsaw-Code/outline-releases/blob/master/client/Outline.apk?raw=true">Direct Download</a></p><p><a href="https://getoutline.org/">Outline</a> 由 <a href="https://jigsaw.google.com/">Google Jigsaw</a> 出品，功能上比较简单，必须使用秘钥进行连接。</p><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>目前在 App Store 上面无法在中国区搜索到，请使用非中国大陆区的账号搜索并购买。</p><p><strong>Outline iOS</strong>: <a href="https://github.com/Jigsaw-Code/outline-client/">GitHub</a>/<a href="https://itunes.apple.com/app/outline-app/id1356177741">App Store</a></p><p><a href="https://getoutline.org/">Outline</a> 由 <a href="https://jigsaw.google.com/">Google Jigsaw</a> 出品，功能上比较简单，必须使用秘钥进行连接。可以免费下载。</p><p><strong>Potatso Lite</strong>: <a href="https://itunes.apple.com/app/potatso-lite/id1239860606">App Store</a></p><p><a href="https://potatso.com/">Potatso</a> 的简版，不过功能够用，可以免费下载。</p><p><strong>Shadowrocket</strong>: <a href="https://itunes.apple.com/app/shadowrocket/id932747118">App Store</a></p><p>Shadowrocket 应该属于目前最火的 Shadowsocks iOS 客户端了，功能强大，更新快。性价比非常高，推荐购买使用，目前美区是 $2.99 的价格。使用教程请参考：<a href="https://vpnto.net/posts/ios-shadowsocks/">在 iOS 中使用 Shadowsocks 客户端</a></p><h3 id="OpenWrt-LEDE"><a href="#OpenWrt-LEDE" class="headerlink" title="OpenWrt/LEDE"></a>OpenWrt/LEDE</h3><p><strong>Shadowsocks-libev for OpenWrt</strong>: <a href="https://github.com/shadowsocks/openwrt-shadowsocks/releases">GitHub</a></p><p><strong>OpenWrt LuCI for Shadowsocks-libev</strong>: <a href="https://github.com/shadowsocks/luci-app-shadowsocks/releases">GitHub</a></p><p>在 OpenWrt/LEDE 的路由器中使用 Shadowsocks，配合 ChinaDNS 和 DNS-Forwarder 使用更好，在这里查看 <a href="https://www.vpnto.net/posts/shadowsocks-openwrt/">OpenWrt/LEDE Shadowsocks</a> 安装教程。</p><h2 id="其它方案"><a href="#其它方案" class="headerlink" title="其它方案"></a>其它方案</h2><p>与shadowsocks齐名的还有<a href="https://toutyrater.github.io/prep/">v2ray</a>,部署要复杂得多，可以作为一个备选项.</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mermaid图表</title>
      <link href="2020/12/25/mermaid%E5%9B%BE%E8%A1%A8/"/>
      <url>2020/12/25/mermaid%E5%9B%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">title Adding GANTT diagram to mermaid</span><br><span class="line">excludes weekdays 2014-01-10</span><br><span class="line"></span><br><span class="line">section A section</span><br><span class="line">Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">Future task               :         des3, after des2, 5d</span><br><span class="line">Future task2               :         des4, after des2, 5d</span><br></pre></td></tr></table></figure><pre class="mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidexcludes weekdays 2014-01-10section A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des2, 5d</pre><a id="more"></a><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class="line">    alt is sick</span><br><span class="line">        Bob-&gt;&gt;Alice: Not so good :(</span><br><span class="line">    else is well</span><br><span class="line">        Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span><br><span class="line">    end</span><br><span class="line">    opt Extra response</span><br><span class="line">        Bob-&gt;&gt;Alice: Thanks for asking</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><pre class="mermaid">sequenceDiagram    Alice->>Bob: Hello Bob, how are you?    alt is sick        Bob->>Alice: Not so good :(    else is well        Bob->>Alice: Feeling fresh like a daisy    end    opt Extra response        Bob->>Alice: Thanks for asking    end</pre><pre class="mermaid">sequenceDiagram    participant A as hue-hr-recruiting    participant B as AWS Lambda(dev)    participant C as AWS Codebuild    participant D as hpm-version    A->>B: webhook    B-->>B: Sync source code to s3 bucket.    B->>+C: Trigger a build    C-->>-B: success    B->>D: Update commit sha of `hue-hr-recruiting` in version.yml</pre><pre class="mermaid">sequenceDiagram    participant A as hpm-version    participant B as AWS Lambda(prod)    participant C as AWS Pipeline    participant D as AWS Codebuild    participant E as Slack    A->>B: webhook: push a new release tag    loop Every projects in version.yml        B->>+B: sync source code to s3 bucket in prod env for current tag.    end       B->>+C: Trigger a build    C->>+E: request approval    E-->>-C: approval    loop Every projects in version.yml        C->>+D: build (buildspec.yml)        D-->>-C: success    end    C-->>-B: success</pre><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><h3 id="利用mermaid来画思维导图"><a href="#利用mermaid来画思维导图" class="headerlink" title="利用mermaid来画思维导图"></a>利用mermaid来画思维导图</h3><pre class="mermaid">    graph TD    A(工业用地效率)-->B1(土地利用强度)    A-->B2(土地经济效益)    B1-->C1(容积率)    B1-->C2(建筑系数)    B1-->C3(亩均固定资本投入)    B2-->D1(亩均工业产值)    B2-->D2(亩均税收)</pre><pre class="mermaid">graph LRKaTex--> A(标记 Accents)A-->B(撇,估计,均值,向量等写于符号上下的标记)KaTex--> 分隔符_Delimiters分隔符_Delimiters-->小中大括号,竖杠,绝对值等分隔符的反斜杠写法KaTex--> 公式组_Enviroments公式组_Enviroments-->C(.....)B --> E(sdfdfdsf)B --> E2(test)B --> E3(test sdfsdf)B --> E4(test dfewrwer)E4 --> F("test content")</pre><blockquote class="pullquote mindmap mindmap-md"><ul><li><a href="https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html">Hexo 的思维导图插件</a><ul><li>前言</li><li>使用方法<ul><li>一</li><li>二</li><li>三</li></ul></li><li>太长不看</li><li>参考资料</li></ul></li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e^&#123;i\pi&#125; + 1 &#x3D; 0</span><br></pre></td></tr></table></figure><!-- $$f(x) = \int_{-\infty}^\infty \hat f(\xi)\,e^{2 \pi \xi x} \,d\xi$$ --><p>:joy:</p><hr><!-- <script>alert("hello")</script> --><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://mermaid-js.github.io/mermaid/#/sequenceDiagram">mermaid-js</a></li><li><a href="https://github.com/hexojs/hexo-math">hexo-math</a></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将springboot项目部署成ubuntu service</title>
      <link href="2020/12/24/%E5%B0%86springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%88%90ubuntu%20service/"/>
      <url>2020/12/24/%E5%B0%86springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%88%90ubuntu%20service/</url>
      
        <content type="html"><![CDATA[<p>在部署springboot项目时，为了运行维护的方便，可将其部署为ubuntu service,并且可随系统启动而自动启动，本文将介绍一种比较简单的方式来实现此功能。</p><a id="more"></a><ol><li>在<code>home</code> 目录下建一个 <code>workspace</code> 目录，目录里放你的springboot打包以后的jar包，如：<code>demo.jar</code></li><li>在<code>/etc/systemd/system/</code> 下添加一个新文件 <code>demo.service</code><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">My Webapp Java REST Service</span></span><br><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">User</span>=<span class="string">ubuntu</span></span><br><span class="line"><span class="comment"># The configuration file application.properties should be here:</span></span><br><span class="line"><span class="comment">#change this to your workspace</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=<span class="string">/home/ubuntu/workspace</span></span><br><span class="line"><span class="comment">#path to executable. </span></span><br><span class="line"><span class="comment">#executable is a bash script which calls jar file</span></span><br><span class="line"><span class="comment"># please change your java path</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/bin/java -jar /home/ubuntu/workspace/demo.jar</span></span><br><span class="line"><span class="attr">SuccessExitStatus</span>=<span class="string">143</span></span><br><span class="line"><span class="attr">TimeoutStopSec</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="string">on-failure</span></span><br><span class="line"><span class="attr">RestartSec</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></table></figure></li><li>依次执行以下命令<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> demo.service</span><br><span class="line">sudo systemctl start demo</span><br><span class="line">sudo systemctl status demo</span><br></pre></td></tr></table></figure>如果一切正常的话，应用已经启动好了，你可以使用以下命令查看日志<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl -f -u demo</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li></ol><ul><li><a href="https://dzone.com/articles/run-your-java-application-as-a-service-on-ubuntu">Run Your Java App as a Service on Ubuntu</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html">Springboot doc</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用软件安装</title>
      <link href="2020/12/23/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>2020/12/23/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="etc-apt-source-list"><a href="#etc-apt-source-list" class="headerlink" title="/etc/apt/source.list"></a>/etc/apt/source.list</h2><p>可以自动匹配速度比较快的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]&#x2F; xenial main restricted</span><br><span class="line">deb mirror:&#x2F;&#x2F;mirrors.ubuntu.com&#x2F;mirrors.txt precise main restricted universe multiverse</span><br><span class="line">deb mirror:&#x2F;&#x2F;mirrors.ubuntu.com&#x2F;mirrors.txt precise-updates main restricted universe multiverse</span><br><span class="line">deb mirror:&#x2F;&#x2F;mirrors.ubuntu.com&#x2F;mirrors.txt precise-backports main restricted universe multiverse</span><br><span class="line">deb mirror:&#x2F;&#x2F;mirrors.ubuntu.com&#x2F;mirrors.txt precise-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="删除不常用软件包"><a href="#删除不常用软件包" class="headerlink" title="删除不常用软件包"></a>删除不常用软件包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## amazon</span><br><span class="line">sudo apt-get remove unity-webapps-common </span><br><span class="line">## libre-office</span><br><span class="line">sudo apt-get remove libreoffice-common  </span><br><span class="line"></span><br><span class="line">sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot </span><br><span class="line">sudo apt-get remove gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install  </span><br><span class="line">sudo apt-get remove onboard deja-dup </span><br></pre></td></tr></table></figure><h2 id="shadowsocks-libev"><a href="#shadowsocks-libev" class="headerlink" title="shadowsocks-libev"></a>shadowsocks-libev</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:max-c-lv&#x2F;shadowsocks-libev</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install shadowsocks-libev</span><br><span class="line"></span><br><span class="line"># Edit the configuration file</span><br><span class="line">sudo vim &#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json</span><br><span class="line"></span><br><span class="line"># Edit the default configuration for debian</span><br><span class="line">sudo vim &#x2F;etc&#x2F;default&#x2F;shadowsocks-libev</span><br><span class="line"></span><br><span class="line"># Start the service</span><br><span class="line">#sudo &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev start    # for sysvinit, or</span><br><span class="line">#sudo systemctl start shadowsocks-libev      # for systemd</span><br><span class="line">ss-local -c  &#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json</span><br></pre></td></tr></table></figure><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;s1.music.126.net&#x2F;download&#x2F;pc&#x2F;netease-cloud-music_1.0.0-2_amd64_ubuntu16.04.deb</span><br><span class="line">sudo dpkg -i netease-cloud-music_1.0.0-2_amd64_ubuntu16.04.deb</span><br></pre></td></tr></table></figure><h2 id="Psensors"><a href="#Psensors" class="headerlink" title="Psensors"></a>Psensors</h2><p>首先安装监控cpu 主板 风扇等需要的包： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lm-sensors hddtemp </span><br><span class="line">sudo sensors-detect </span><br></pre></td></tr></table></figure><p>回复”yes”即可。<br>重启或通过以下命令加载 sensor需要的模块。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service module-init-tools start </span><br><span class="line">sudo apt-get install psensor </span><br></pre></td></tr></table></figure><p>或者通过stable PPA安装 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:jfi&#x2F;ppa </span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install psensor</span><br></pre></td></tr></table></figure><h2 id="设置时间使用UTC"><a href="#设置时间使用UTC" class="headerlink" title="设置时间使用UTC"></a>设置时间使用UTC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;default&#x2F;rcS</span><br><span class="line">将UTC&#x3D;no改为UTC&#x3D;yes</span><br></pre></td></tr></table></figure><h2 id="安装Chrome"><a href="#安装Chrome" class="headerlink" title="安装Chrome"></a>安装Chrome</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/Linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line">sudo apt-get install libappindicator1 libindicator7  </span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb   </span><br><span class="line">sudo apt-get -f install  </span><br></pre></td></tr></table></figure><h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deb http://archive.ubuntukylin.com:10006/ubuntukylin trusty main  </span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sogoupinyin</span><br></pre></td></tr></table></figure><h2 id="安装WPS-Office"><a href="#安装WPS-Office" class="headerlink" title="安装WPS Office"></a>安装WPS Office</h2><p><code>sudo apt-get install wps-office  </code></p><h2 id="安装Oracle-Java"><a href="#安装Oracle-Java" class="headerlink" title="安装Oracle Java"></a>安装Oracle Java</h2><ul><li>方法一<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java </span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install oracle-java8-installer </span><br></pre></td></tr></table></figure>由于系统自带的是OpenJDK，卸载OpenJDK之后会带有残留，导致运行<br><code>java -version</code> 时第一行不是java的版本号，会是Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar这个提示，导致很多检测java版本号的脚本会运行出错，因此需要手动清除残留。<br><code>sudo rm /usr/share/upstart/sessions/jayatana.conf </code><br>删除/usr/share/upstart/sessions/jayatana.conf文件，重启之后再运行java -version就不会再有Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar提示了。</li><li>方法二<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;java&#x2F;jdk&#x2F;8u144-b01&#x2F;090f390dda5b47b9b721c7dfaa008135&#x2F;jdk-8u144-linux-x64.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装Sublime-Text-3"><a href="#安装Sublime-Text-3" class="headerlink" title="安装Sublime Text 3"></a>安装Sublime Text 3</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/sublime-text-3    </span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sublime-text</span><br></pre></td></tr></table></figure><h2 id="安装git和vpnc"><a href="#安装git和vpnc" class="headerlink" title="安装git和vpnc"></a>安装git和vpnc</h2></li></ul><p><code>sudo apt-get install vpnc git </code></p><h2 id="安装unrar"><a href="#安装unrar" class="headerlink" title="安装unrar"></a>安装unrar</h2><p>系统默认不带解压缩rar文件的功能，手动安装unrar程序<br><code> sudo apt-get install unrar</code><br>装上之后就可以用命令解压缩rar文件了。<br>使用如下命令解压缩文件到当前目录。<br><code> unrar x test.rar</code></p><h2 id="为知笔记"><a href="#为知笔记" class="headerlink" title="为知笔记"></a>为知笔记</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:wiznote-team</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install wiznote</span><br></pre></td></tr></table></figure><h2 id="有道词典-youdao-dict"><a href="#有道词典-youdao-dict" class="headerlink" title="有道词典 youdao-dict"></a>有道词典 youdao-dict</h2><p>go to the  official website <a href="http://cidian.youdao.com/index-linux.html">http://cidian.youdao.com/index-linux.html</a><br>and download the 二进制安装<br>then run the install.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;codown.youdao.com&#x2F;cidian&#x2F;linux&#x2F;youdao-dict_1.1.0-0-deepin_amd64.deb</span><br><span class="line">sudo dpkg -i </span><br></pre></td></tr></table></figure><h2 id="zshell"><a href="#zshell" class="headerlink" title="zshell"></a>zshell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class="line">##常用主题 gentoo</span><br><span class="line"># 切换到zsh</span><br><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功：<br>　<code>sudo netstat -tap | grep mysql </code><br> 通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。</p><h2 id="拼音输入法"><a href="#拼音输入法" class="headerlink" title="拼音输入法"></a>拼音输入法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fcitx-team&#x2F;nightly</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fcitx fcitx-config-gtk fcitx-table-all im-switch  fcitx-googlepinyin</span><br></pre></td></tr></table></figure><h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team&#x2F;sublime-text-3</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sublime-text-installer</span><br></pre></td></tr></table></figure><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.nus.edu.sg&#x2F;mirror&#x2F;apache&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.8&#x2F;bin&#x2F;apache-tomcat-8.5.8.tar.gz</span><br><span class="line">tar -xf apache-tomcat-8.5.8.tar.gz</span><br><span class="line">sudo mv apache-tomcat-8.5.8 &#x2F;opt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装Cairo-Dock并启用桌面视觉效果"><a href="#安装Cairo-Dock并启用桌面视觉效果" class="headerlink" title="安装Cairo-Dock并启用桌面视觉效果"></a>安装Cairo-Dock并启用桌面视觉效果</h2><p>Cairo-Dock是一款漂亮且灵巧的用于Linux桌面上的启动条，类似于Mac OS X dock。想要在Ubuntu上安装它，可以在终端上运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cairo-dock cairo-dock-plug-ins </span><br></pre></td></tr></table></figure><h2 id="点击图标最小化功能的设置"><a href="#点击图标最小化功能的设置" class="headerlink" title="点击图标最小化功能的设置"></a>点击图标最小化功能的设置</h2><p>ubuntu16.04默认是没有开启此功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings set org.compiz.unityshell:&#x2F;org&#x2F;compiz&#x2F;profiles&#x2F;unity&#x2F;plugins&#x2F;unityshell&#x2F; launcher-minimize-window true</span><br></pre></td></tr></table></figure><h2 id="Shutter"><a href="#Shutter" class="headerlink" title="Shutter"></a>Shutter</h2><p>Ubuntu上最好用的截图工具，可以对截图的图片进行编辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install shutter</span><br></pre></td></tr></table></figure><h2 id="状态栏系统监控"><a href="#状态栏系统监控" class="headerlink" title="状态栏系统监控"></a>状态栏系统监控</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor  </span><br><span class="line">sudo apt-get update  </span><br><span class="line"></span><br><span class="line">sudo apt-get install indicator-sysmonitor  </span><br></pre></td></tr></table></figure><p> 终端执行：  indicator-sysmonitor &amp;，然后Ctrl+C就可以实现后台运行indicator-sysmonitor，</p><p>可以对要显示的信息的格式进行设置。</p><h2 id="安装失败时的处理方法"><a href="#安装失败时的处理方法" class="headerlink" title="安装失败时的处理方法"></a>安装失败时的处理方法</h2><h3 id="安装失败"><a href="#安装失败" class="headerlink" title="安装失败"></a>安装失败</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i --force-overwrite &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;libogremain-1.7.3_1.7.3-ogredev-natty3_i386.deb</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>function 2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info&#x2F;oracle-java7-installer* </span><br><span class="line">sudo apt-get purge oracle-java7-installer* </span><br><span class="line">sudo rm &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;*java* </span><br><span class="line">sudo apt-get update </span><br></pre></td></tr></table></figure><h3 id="Unable-to-lock-the-administration-directory-var-lib-dpkg-is-another-process-using-it"><a href="#Unable-to-lock-the-administration-directory-var-lib-dpkg-is-another-process-using-it" class="headerlink" title="Unable to lock the administration directory (/var/lib/dpkg/) is another process using it?"></a>Unable to lock the administration directory (/var/lib/dpkg/) is another process using it?</h3><p>这是一个最好的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep apt</span><br><span class="line">kill processnumber</span><br><span class="line">kill -9 processnumber</span><br></pre></td></tr></table></figure><h2 id="i-nex-硬件查看工具"><a href="#i-nex-硬件查看工具" class="headerlink" title="i-nex 硬件查看工具"></a>i-nex 硬件查看工具</h2><p>cpu-z 的移植 版本</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 应用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack SourceMap 配置</title>
      <link href="2020/12/20/webpack%20sourcemap/"/>
      <url>2020/12/20/webpack%20sourcemap/</url>
      
        <content type="html"><![CDATA[<p>最近项目中遇到了sourcemap不生效的问题,而且是有的项目生效,有的项目不生效, 经过一番查找资料,最终将问题解决,因此写篇文章以作备忘,也给后来者一个参考</p><h2 id="关于webpack-sourcemap"><a href="#关于webpack-sourcemap" class="headerlink" title="关于webpack sourcemap"></a>关于webpack sourcemap</h2><p>其实<a href="https://webpack.js.org/configuration/devtool/">官方文档</a>已经写得比较详细了, 需要注意的点是：</p><ol><li>当<code>mode: production</code>时不能用 <code>Development</code> 模式的sourcemap, 否则文件名都不会显示出来, 我测试时在production模式下使用<code>eval-source-map</code>时就出现了这种情况。</li><li><code>mode: production</code> 时推荐使用 <code>devtool: &#39;source-map&#39;</code>。</li><li><code>mode: development</code> 时推荐使用 <code>devtool: &#39;eval-source-map&#39;</code>, 因为可以显示行号和源文件名,便于排查问题, 但这个模式初始化的时候要稍微慢一点。<a id="more"></a><h2 id="Typescript项目"><a href="#Typescript项目" class="headerlink" title="Typescript项目"></a>Typescript项目</h2>对于typescript项目, 如果你用的<code>ts-loader</code>, 请务必注意两个地方:</li><li>tsconfig.json当中配置<code>sourceMap: true</code>, 以下为一个示例配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;~common/*&quot;</span>: [<span class="string">&quot;src/common/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;~model/*&quot;</span>: [<span class="string">&quot;src/model/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;~orm/*&quot;</span>: [<span class="string">&quot;src/orm/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;~load/*&quot;</span>: [<span class="string">&quot;src/load/*&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">      <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dom&quot;</span>,</span><br><span class="line">      <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">      <span class="string">&quot;esnext.asynciterable&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;node&quot;</span>],</span><br><span class="line">    <span class="string">&quot;typeRoots&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;node_modules/@types&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src/server/handler.ts&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>正确配置<code>ts-loader</code><br>我们的ts项目sourcemap无法显示行号和源代码路径,就是挂在这里,对此,<code>ts-loader</code>官方github里有一个<a href="https://github.com/TypeStrong/ts-loader/tree/master/examples/fork-ts-checker-webpack-plugin">example</a>, ts-loader一定要记得配置<code>transpileOnly: true</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">          &#123;</span><br><span class="line">              test: <span class="regexp">/.tsx?$/</span>,</span><br><span class="line">              use: [</span><br><span class="line">                  &#123; <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>, <span class="attr">options</span>: &#123; <span class="attr">transpileOnly</span>: <span class="literal">true</span> &#125; &#125;  </span><br><span class="line">              ],</span><br><span class="line">          &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> sourcemap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot中使用logback输出日志中文乱码</title>
      <link href="2020/12/20/springboot-logback/"/>
      <url>2020/12/20/springboot-logback/</url>
      
        <content type="html"><![CDATA[<p>在Springboot中使用logback输出日志时，中文变成了<code>？</code>乱码，第一反应是编码问题.<br>解决方法：</p><blockquote><p>设置charset, 在encoder 中增加一行 <code>&lt;charset&gt;UTF-8&lt;/charset&gt;</code>，重新启动系统，日志中中文显示正常了。</p></blockquote> <a id="more"></a><p>下面是我的一个简要的logback.xml 配置,以备不时之需。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 控制台 appender --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 出错日志 appender  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 按天回滚 daily --&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- log.dir 在maven profile里配置 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./log/error/daotong-error-%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 日志最大的历史 60天 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><span class="comment">&lt;!-- 只打印错误日志 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问日志 appender  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 按天回滚 daily --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./log/warn/daotong-warn-%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 日志最大的历史 60天 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><span class="comment">&lt;!-- 只打印WARN日志 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- info日志 appender  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 按天回滚 daily --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./log/info/daotong-info-%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 日志最大的历史 60天 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><span class="comment">&lt;!-- 只打印错误日志 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--日志打印的包的范围，及分类日志文件存储 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.daotonginfo.manage&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;INFO&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--控制台打印资源加载信息--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> sourcemap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具换源</title>
      <link href="2020/12/13/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8D%A2%E6%BA%90/"/>
      <url>2020/12/13/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>由于长城的存在，一些开发工具在国内就不是那么好使，默认的源都在国外，网速很慢，所以需要进行换源．</p><a id="more"></a><h2 id="Maven换源"><a href="#Maven换源" class="headerlink" title="Maven换源"></a>Maven换源</h2><p>maven作为一个项目管理工具确实非常好用，但是在国内这个网络条件下实在是让人恼火。之前oschina的中央仓库可用，现在oschina的maven服务器关了，一直没找到国内镜像来替代。今天发现阿里云公开了一个中央仓库，大家可以试试。<br>修改maven根目录下的conf文件夹中的setting.xml文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后就能享受如飞的maven下载速度。</p><h2 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="国内优秀npm镜像"><a href="#国内优秀npm镜像" class="headerlink" title="国内优秀npm镜像"></a>国内优秀npm镜像</h3><ul><li> 淘宝npm镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">搜索地址：http:&#x2F;&#x2F;npm.taobao.org&#x2F;</span><br><span class="line">registry地址：http:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure></li><li> cnpmjs镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">搜索地址：http:&#x2F;&#x2F;cnpmjs.org&#x2F;</span><br><span class="line">registry地址：http:&#x2F;&#x2F;r.cnpmjs.org&#x2F;</span><br></pre></td></tr></table></figure></li><li>如何使用<br>有很多方法来配置npm<br>的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：<ol><li>临时使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure></li><li>持久使用<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">// 配置后可通过下面方式来验证是否成功</span><br><span class="line">npm config get registry</span><br><span class="line">// 或npm info express</span><br></pre></td></tr></table></figure></li><li>通过cnpm使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">&#x2F;&#x2F; 使用cnpm install expresstall express</span><br></pre></td></tr></table></figure>来源：<a href="http://www.jianshu.com/p/0deb70e6f395">http://www.jianshu.com/p/0deb70e6f395</a></li></ol></li></ul><h2 id="ubuntu改源"><a href="#ubuntu改源" class="headerlink" title="ubuntu改源"></a>ubuntu改源</h2><p><a href="http://mirrors.163.com/.help/ubuntu.html">网易源</a></p><h2 id="Ruby-改源"><a href="#Ruby-改源" class="headerlink" title="Ruby 改源"></a>Ruby 改源</h2><p>RubyGems 一直以来在国内都非常难访问到，在本地你或许可以翻墙，当你要发布上线的时候，你就很难搞了！更多细节访问 <a href="http://gems.ruby-china.org/">ruby-china</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https:&#x2F;&#x2F;gems.ruby-china.org&#x2F; --remove https:&#x2F;&#x2F;rubygems.org&#x2F;</span><br><span class="line">$ gem sources -l</span><br><span class="line">https:&#x2F;&#x2F;gems.ruby-china.org</span><br><span class="line"># 确保只有 gems.ruby-china.org</span><br><span class="line"># 更新缓存</span><br><span class="line">gem sources -u </span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 应用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot打包瘦身</title>
      <link href="2020/12/10/Springboot%E6%89%93%E5%8C%85%E7%98%A6%E8%BA%AB/"/>
      <url>2020/12/10/Springboot%E6%89%93%E5%8C%85%E7%98%A6%E8%BA%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>Springboot</strong> 默认的打包方式会将所有的依赖都打到jar包里，导致打包以后的文件体积巨大，少则几十M，多则上百M，内网网络环境当中还不怎么影响，但是一旦部署到公网或者云服务器上时，如果网络环境不好，等待将是一个漫长的过程，极大地影响应用的快速部署和测试流程。</p><p>有需求就会有解决的办法，其实早有插件做到这件事。<a href="https://github.com/dsyer/spring-boot-thin-launcher">Spring Boot Thin Launcher</a>， 你值得拥有。</p><a id="more"></a><p>使用插件以后，原来打包45M的jar包，现在体积只有 <code>40K</code>，瘦身效果非常明显，并且也不改变原有的打包方式和部署方法。打包以后的jar也是可执行的。</p><p>第一次执行时，会自动下载所有的依赖包，并且缓存到本地，默认的缓存路径是<code>$&#123;user.home&#125;/.m2/</code>，你也可以使用如下命令在启动时修改依赖的路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dthin.root=.  -jar  app-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>它将会下载所有的依赖包到你当前目录的<code>repository</code> 文件夹下。</p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><p>在pom.xml添加以下插件代码，然后正常地打包即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot.experimental<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-thin-layout<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/dsyer/spring-boot-thin-launcher">Spring Boot Thin Launcher</a>.</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI之el-upload实现base64上传</title>
      <link href="2020/12/10/ElementUI%E4%B9%8Bel-upload%E5%AE%9E%E7%8E%B0base64%E4%B8%8A%E4%BC%A0/"/>
      <url>2020/12/10/ElementUI%E4%B9%8Bel-upload%E5%AE%9E%E7%8E%B0base64%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>我们的系统后端使用了<code>aws</code> 的 <code>serverless</code>架构，由于<code>lambda</code>的限制，在上传文件时要先将文件转换为base64，才能进行上传，并且不能超过10M，。<br>经过一番选择，我们决定使用<code>el-upload</code>这个控件。<br><a href="https://github.com/ElemeFE/element/issues/3087">https://github.com/ElemeFE/element/issues/3087</a><br>但是，这个组件目前并没有对base64提供良好的支持。<br><a href="https://github.com/ElemeFE/element/blob/2a1a6360ca763139b666aaca899703931a4a672b/packages/upload/src/upload.vue">https://github.com/ElemeFE/element/blob/2a1a6360ca763139b666aaca899703931a4a672b/packages/upload/src/upload.vue</a><br>这个是组件源码。</p><a id="more"></a><p>我目前的方法是 通过自定义 <code>http-method</code>，并在方法中主动触发回调事件来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;el-upload class&#x3D;&quot;basic-upload-field__uploader&quot; drag ref&#x3D;&quot;upload&quot; :action&#x3D;&quot;actionUrl&quot; :on-success&#x3D;&quot;uploadSuccess&quot; </span><br><span class="line">      :before-upload&#x3D;&quot;beforeUpload&quot; :on-remove&#x3D;&quot;removeHandler&quot; :http-request&#x3D;&quot;httpRequest&quot; multiple&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;el-icon-upload&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;el-upload__text&quot;&gt;&#123;&#123;$t(&#39;upload.drag&#39;)&#125;&#125;</span><br><span class="line">          &lt;em&gt;&#123;&#123;$t(&#39;upload.select&#39;)&#125;&#125;&lt;&#x2F;em&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;el-upload__tip&quot; slot&#x3D;&quot;tip&quot;&gt;&#123;&#123;$t(&#39;upload.tip&#39;)&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;el-upload&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import axios from &#39;~&#x2F;plugins&#x2F;axios.js&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;basic-upload-field&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      fileList: [],</span><br><span class="line">      actionUrl: &#96;$&#123;process.env.baseURL&#125;&#x2F;api&#x2F;file&#x2F;upload&#96;,</span><br><span class="line">      fileReader: &#39;&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    httpRequest (options) &#123;</span><br><span class="line">      let file &#x3D; options.file</span><br><span class="line">      let filename &#x3D; file.name</span><br><span class="line">      if (file) &#123;</span><br><span class="line">        this.fileReader.readAsDataURL(file)</span><br><span class="line">      &#125;</span><br><span class="line">      this.fileReader.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        let base64Str &#x3D; this.fileReader.result</span><br><span class="line">        let config &#x3D; &#123;</span><br><span class="line">          url: &#39;&#x2F;api&#x2F;file&#x2F;upload&#x2F;base64&#39;,</span><br><span class="line">          method: &#39;post&#39;,</span><br><span class="line">          &#x2F;&#x2F; file: file,</span><br><span class="line">          data: &#123;</span><br><span class="line">            base64Str: base64Str.split(&#39;,&#39;)[1],</span><br><span class="line">            name: filename</span><br><span class="line">          &#125;,</span><br><span class="line">          timeout: 10000,</span><br><span class="line">          onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">            &#x2F;&#x2F; console.log(progressEvent)</span><br><span class="line">            progressEvent.percent &#x3D; progressEvent.loaded &#x2F; progressEvent.total * 100</span><br><span class="line">            options.onProgress(progressEvent, file)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        axios(config)</span><br><span class="line">          .then(res &#x3D;&gt; &#123;</span><br><span class="line">            options.onSuccess(res, file)</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(err &#x3D;&gt; &#123;</span><br><span class="line">            options.onError(err)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeHandler (file, fileList) &#123;</span><br><span class="line">      let index &#x3D; this.fileList.indexOf(file.key)</span><br><span class="line">      this.fileList.splice(index, 1)</span><br><span class="line">      console.log(&#39;current file list &#x3D;&#x3D;&gt;&#39;, this.fileList)</span><br><span class="line">      this.$store.commit(&#39;applicant&#x2F;updateResume&#39;, this.fileList)</span><br><span class="line">      axios.delete(&#96;&#x2F;api&#x2F;file&#x2F;delete?key&#x3D;$&#123;file.key&#125;&#96;).then(res &#x3D;&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeUpload (file) &#123;</span><br><span class="line">      const isLt5M &#x3D; file.size &lt; 5 * 1024 * 1024</span><br><span class="line">      if (this.fileList.length &gt;&#x3D; 3) &#123;</span><br><span class="line">        alert(&#39;At most 3 files&#39;)</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      if (!isLt5M) &#123;</span><br><span class="line">        alert(&#39;The max size is 5MB&#39;)</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadSuccess (res, file, fileList) &#123;</span><br><span class="line">      let data &#x3D; res.data</span><br><span class="line">      console.log(&#39;upload result:&#39;, res, file)</span><br><span class="line">      file.key &#x3D; data.key</span><br><span class="line">      this.fileList.push(data.key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    if (!window.FileReader) &#123;</span><br><span class="line">      console.error(&#39;Your browser does not support FileReader API!&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    this.fileReader &#x3D; new FileReader()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">.basic-upload-field &#123;</span><br><span class="line">  padding: 16px;</span><br><span class="line">  &#x2F;* text-align: left; *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">.basic-upload-field__uploader &#123;</span><br><span class="line">  padding: 16px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.basic-upload-field__uploader .el-upload-dragger &#123;</span><br><span class="line">  min-width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">.basic-upload-field__uploader .el-upload-list &#123;</span><br><span class="line">  &#x2F;* text-align: center; *&#x2F;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: 0 16px;</span><br><span class="line">  min-width: 500px;</span><br><span class="line">&#125;</span><br><span class="line">.basic-upload-field__uploader .el-upload-list__item-name &#123;</span><br><span class="line">  max-width: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/ElemeFE/element/blob/dev/packages/upload/src/ajax.js">upload ajax</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/apigateway/latest/developerguide/limits.html">aws api gateway的限制</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript数组常用方法总结</title>
      <link href="2020/12/05/javascript%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>2020/12/05/javascript%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="数组常用的api"><a href="#数组常用的api" class="headerlink" title="数组常用的api"></a>数组常用的api</h2><p>数组是javascript当中最常用的一种数据结构，熟练掌握其常用的api的用法是一项前端基本技能.</p><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><blockquote><p>删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.pop(); <span class="comment">//a：[1,2,3,4]   b：5 //不用返回的话直接调用就可以了</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><blockquote><p> 将参数添加到原数组末尾，并返回数组的长度 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.push(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a：[1,2,3,4,5,6,7]   b：7 </span></span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><blockquote><p>返回一个新数组，是将参数添加到原数组中构成的 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.concat(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a：[1,2,3,4,5]   b：[1,2,3,4,5,6,7] </span></span><br></pre></td></tr></table></figure><h3 id="splice-start-deleteCount-val1-val2-…"><a href="#splice-start-deleteCount-val1-val2-…" class="headerlink" title="splice(start,deleteCount,val1,val2,…)"></a>splice(start,deleteCount,val1,val2,…)</h3><blockquote><p> 从start位置开始删除deleteCount项，并从该位置起插入val1,val2,… </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>); <span class="comment">//a：[1,2,7,8,9,5]   b：[3,4] </span></span><br><span class="line"><span class="keyword">var</span> b = a.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//同shift a: [2,7,8,9,5],b :[1]</span></span><br><span class="line">a.splice(<span class="number">0</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">1</span>); <span class="keyword">var</span> b = a.length; <span class="comment">//同unshift a: [-2, -1, 2, 7, 8, 9, 5], b: 7</span></span><br><span class="line"><span class="keyword">var</span> b = a.splice(a.length-<span class="number">1</span>,<span class="number">1</span>); <span class="comment">//同pop a: [-2, -1, 2, 7, 8, 9],  b=5</span></span><br><span class="line">a.splice(a.length,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>); <span class="keyword">var</span> b = a.length; <span class="comment">//同push </span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><blockquote><p>将数组反序 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.reverse(); <span class="comment">//a：[5,4,3,2,1]   b：[5,4,3,2,1] </span></span><br></pre></td></tr></table></figure><h3 id="sort-orderfunction"><a href="#sort-orderfunction" class="headerlink" title="sort(orderfunction)"></a>sort(orderfunction)</h3><blockquote><p>  按指定的参数对数组进行排序 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.sort(); <span class="comment">//a：[1,2,3,4,5]   b：[1,2,3,4,5] </span></span><br></pre></td></tr></table></figure><h3 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start,end)"></a>slice(start,end)</h3><blockquote><p>  返回从原数组中指定开始下标到结束下标之间的项组成的新数组 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">2</span>,<span class="number">5</span>); <span class="comment">//a：[1,2,3,4,5]   b：[3,4,5] </span></span><br></pre></td></tr></table></figure><h3 id="join-separator"><a href="#join-separator" class="headerlink" title="join(separator)"></a>join(separator)</h3><blockquote><p>将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.join(<span class="string">&quot;|&quot;</span>); <span class="comment">//a：[1,2,3,4,5]   b：&quot;1|2|3|4|5&quot;</span></span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr= arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//newArr [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr= arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//newArr: [4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote><p>让数组中的前项和后项做某种计算，并累计最终值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> result= arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev+next;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//result: 15</span></span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><blockquote><p>检测数组中每项是否符合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> result=arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><blockquote><p>检测数组中是否有某些项符合条件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> result= arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 编程技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
